"""
Django settings for Timecrafter project.

Generated by 'django-admin startproject' using Django 4.1.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import json
from pathlib import Path
import os,dj_database_url
from re import T
import dotenv
from web3 import Web3


# Load environment variables from .env file
dotenv.load_dotenv(override=True)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET_KEY']
OPENAI_API_KEY = os.environ['OPENAI_API_KEY']

PORT = os.environ['PORT']
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ['DEBUG']

ALLOWED_HOSTS = ['127.0.0.1','.onrender.com','timecraft-dbto.onrender.com']


# Application definition

SITE_ID = 1

INSTALLED_APPS = [
    'mainapp',
    'userapp',
    'adminapp',
    'vendorapp',
    'supportapp',
    'blockchain',
    'watch_customizer',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'social_django',
    'widget_tweaks',
    
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Maximum size of the entire request body (in bytes)
DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50 MB

# Maximum size of a single uploaded file (in bytes)
FILE_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50 MB

# Maximum number of files that can be uploaded in a single request
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000

ROOT_URLCONF = 'Timecrafter.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'custom_filters': 'mainapp.templatetags.custom_filters',
            }, 
        },
    },
]

WSGI_APPLICATION = 'Timecrafter.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

DATABASE_URL = os.environ['DATABASE_URL']
# DATABASES['default'] = dj_database_url.parse(DATABASE_URL)

AUTH_USER_MODEL = 'mainapp.User'

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScr-ipt, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/


# Static files settings
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Add WhiteNoise configuration
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files settings
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'


EMAIL_HOST = os.environ['EMAIL_HOST']
EMAIL_PORT = os.environ['EMAIL_PORT']
EMAIL_HOST_USER = os.environ['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD']
EMAIL_USE_TLS = os.environ['EMAIL_USE_TLS']

ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False


AUTHENTICATION_BACKENDS = [
    'mainapp.backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
    'social_core.backends.google.GoogleOAuth2',
]

# Add social auth settings
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ['SOCIAL_AUTH_GOOGLE_OAUTH2_KEY']
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ['SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET']


LOGIN_URL = 'mainapp:login'
LOGOUT_URL = 'logout'
LOGIN_REDIRECT_URL = 'mainapp:login_redirect'
logout_REDIRECT_URL = '/'


SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'mainapp.pipeline.set_user_role', # Custom step to set user role
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)

#  stripe key

STRIPE_PUBLIC_KEY = os.environ['STRIPE_PUBLIC_KEY']     
STRIPE_SECRET_KEY = os.environ['STRIPE_SECRET_KEY']


# Blockchain settings
ETHEREUM_NODE_URL = 'http://127.0.0.1:8545'
ETHEREUM_CHAIN_ID = 1337  # Ganache default chain ID

# Initialize Web3
w3 = Web3(Web3.HTTPProvider(ETHEREUM_NODE_URL))

# Get the first account from Ganache
if w3.is_connected():
    ETHEREUM_ACCOUNT = w3.eth.accounts[0]
else:
    ETHEREUM_ACCOUNT = None

# Load contract data
try:
    with open(os.path.join(BASE_DIR, 'smart contract', 'contract_data.json'), 'r') as f:
        contract_data = json.load(f)
        CERTIFICATE_CONTRACT_ADDRESS = contract_data['address']
        CERTIFICATE_CONTRACT_ABI = contract_data['abi']
except:
    CERTIFICATE_CONTRACT_ADDRESS = '0x69F922Eb0F1aCD5600E0846dA3Bb53B2A50F568B'
    CERTIFICATE_CONTRACT_ABI = None